# This is a basic workflow to help you get started with Actions

name: DownloadsApps

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - '.github/workflows/matrix.yml'
      - 'Downloads.txt'
      - './docs/*'
      - 'history.txt'
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
concurrency:
  group: workflow-${{ github.head_ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Create download folder
        shell: pwsh
        run: new-item DownloadFiles -ItemType directory -ErrorAction SilentlyContinue

      - name: Create download folder
        shell: pwsh
        run: new-item DownloadApps -ItemType directory -ErrorAction SilentlyContinue
        
      - name: Download files - CSV
        shell: pwsh
        run: |
          $ImportCSV = Import-Csv DownloadsApps.csv
          foreach ($CSV in $ImportCSV)
          {
            Start-BitsTransfer $CSV.AppUrl -Destination .\DownloadApps 
            $Item = Get-ChildItem .\DownloadApps 
            $Process = Start-Process $Item.FullName -ArgumentList $CSV.ArgumentList -PassThru
            Write-Host $($Process.Id)
            Set-Content .\ProcessId.txt -Value $($Process.Id)
          }
          
      - name: Register Event for monitor directory changes
        shell: pwsh
        run: |
          $filewatcher = New-Object System.IO.FileSystemWatcher
          $filewatcher.Path = (Get-Item DownloadFiles).FullName
          $filewatcher.Filter = "*.*"
          #include subdirectories $true/$false
          $filewatcher.IncludeSubdirectories = $true
          $filewatcher.EnableRaisingEvents = $true 

          $writeaction = { 
            $path = $Event.SourceEventArgs.FullPath
            $changeType = $Event.SourceEventArgs.ChangeType
            $measure = Get-ChildItem .\DownloadFiles -File -Recurse | measure -Sum -Property length
            $logline = "$(Get-Date), Sum: $(($measure.Sum / 1MB) -as [int] ) MB, Count: $($measure.Count), $path"
            Write-Output $logline
          }

          Get-EventSubscriber  | Unregister-Event
          Register-ObjectEvent $filewatcher 'Created' -Action $writeaction
          
      - name: Wait for downloads to finishe
        shell: pwsh
        run: |
          $ProcessId  = Get-Content .\ProcessId.txt
          while ($true) {
            Start-Sleep 10
            try
            {
              Get-Process -Id $ProcessId -ErrorAction Stop | Out-Null
              $measure = Get-ChildItem .\DownloadFiles -File -Recurse | measure -Sum -Property length
              Write-Output "$(Get-Date), Sum: $(($measure.Sum / 1MB) -as [int] ) MB, Count: $($measure.Count)"
            }
            catch
            {
              Write-Host "Download finished"
              break
            }
          }
          Get-EventSubscriber | Unregister-Event
          Get-ChildItem .\DownloadFiles -File -Recurse | Get-FileHash | Select -Property hash, @{N='File'; E={$_.path.split('\')[-1]}} | Export-Csv -Path .\windows_hash.csv -Encoding UTF8

      - uses: actions/upload-artifact@v2
        with:
          name: windows-hash
          path: .\windows_hash.csv
        
