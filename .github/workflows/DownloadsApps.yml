# This is a basic workflow to help you get started with Actions

name: DownloadsApps

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
      - '.github/workflows/matrix.yml'
      - '.github/workflows/DownloadsApps.yml'
      - 'Downloads.txt'
      - './docs/*'
      - 'History.txt'
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
concurrency:
  group: workflow-${{ github.head_ref }}
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      # use PAT for all gh commands
      GITHUB_TOKEN: ${{secrets.PAT}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Create DownloadFiles folder
        shell: pwsh
        run: new-item DownloadFiles -ItemType directory -ErrorAction SilentlyContinue

      - name: Create DownloadApps folder
        shell: pwsh
        run: new-item DownloadApps -ItemType directory -ErrorAction SilentlyContinue
 
      - name: Create Artifacts folder
        shell: pwsh
        run: new-item Artifacts -ItemType directory -ErrorAction SilentlyContinue
        
      - name: Download files - CSV
        shell: pwsh
        run: |
          $ImportCSV = Import-Csv DownloadsApps.csv
          $allHashFiles = @()
          foreach ($CSV in $ImportCSV)
          {
            $FileNameForCSV = $CSV.AppUrl.Substring($CSV.AppUrl.LastIndexOf('/') + 1).replace('.','_')
            Start-BitsTransfer $CSV.AppUrl -Destination .\DownloadApps 
            $Item = Get-ChildItem .\DownloadApps
            
            Get-AuthenticodeSignature -FilePath $Item.FullName | select *
            
            $Process = Start-Process $Item.FullName -ArgumentList $CSV.ArgumentList -PassThru
            $index = 0

            while ($index -lt $CSV.FilesCount) 
            {
              Start-Sleep 10
              try
              {
                $measure = Get-ChildItem .\DownloadFiles -File -Recurse | measure -Sum -Property length
                $index = $($measure.Count)
                Write-Output "$(Get-Date), Sum: $(($measure.Sum / 1MB) -as [int] ) MB, Count: $($measure.Count)"
                Get-Process -Id $Process.Id -ErrorAction Stop | Out-Null
              }
              catch
              {
                Write-Host "Download finished"
                break
              }
            } # While
            $CSVName = "hash_$($FileNameForCSV).csv"
            Get-ChildItem .\DownloadFiles -File -Recurse | Get-FileHash | Select -Property hash, @{N='File'; E={$_.path.split('\')[-1]}} | Export-Csv -Path .\$($CSVName) -Encoding UTF8 -NoTypeInformation
            $allHashFiles += $CSVName
            write-host "All hashes from file $($CSVName)"
            Get-Content .\$($CSVName)
            
            Write-Host "--------------------------------------------------------"
            
            write-host "Start - Creating artifactor for $($FileNameForCSV)"
            Get-ChildItem .\DownloadFiles | Compress-Archive -DestinationPath ".\DownloadFiles_$($FileNameForCSV).zip" -Force
            write-host "Finished - Creating artifactor for $($FileNameForCSV)"
            
            write-host "Start - Move to Artifacts"
            $tag = "V_$($FileNameForCSV)_$($env:GITHUB_RUN_NUMBER)"
            dir
            Get-ChildItem *.zip | Move-Item -Destination .\Artifacts
            #gh release upload $tag ".\DownloadFiles_$($FileNameForCSV).zip"
            dir .\Artifacts
            write-host "Finished - Move to Artifacts"
            
            write-host "Start - Clean folders"
            Remove-Item -Path .\DownloadFiles\* -Recurse -Force
            Remove-Item -Path .\DownloadApps\* -Recurse -Force
            write-host "Finished - Clean folders"

          } # foreach
          write-host "Start - Create Zip for all hashes CSVs"
          Get-ChildItem -Path .\hash_*.csv | Compress-Archive -DestinationPath .\AllCSVs.zip -Force
          write-host "Finished - Create Zip for all hashes CSVs"
         
      - uses: actions/upload-artifact@v2
        with:
          name: AllCSVs
          path: .\AllCSVs.zip
     
